/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biblioteca.vista;

import biblioteca.entidades.EmpleadoEn;
import biblioteca.entidades.EstudianteEn;
import biblioteca.entidades.LibroEn;
import biblioteca.entidades.ReservaEn;
import biblioteca.negocio.EmpleadoNg;
import biblioteca.negocio.EstudianteNg;
import biblioteca.negocio.LibroNg;
import biblioteca.negocio.ReservaNg;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DIOMEDES GUERRA
 */
public class ClientesV extends javax.swing.JFrame {
   
    
    SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    /**
     * Creates new form ClientesV
     */
    //METODO PRINCIPAL
    public ClientesV() {
        initComponents();
        jButtonCancelarReserva.setVisible(false);
      this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        TipoBusqueda = new javax.swing.JComboBox<>();
        BuscarUser = new javax.swing.JTextField();
        BuscarButton = new javax.swing.JButton();
        JtextCodigoLibro = new javax.swing.JTextField();
        jLabelCodigoLibro = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableLibros = new javax.swing.JTable();
        jButtonReservar = new javax.swing.JButton();
        jDateChooserFechaReserva = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableReservas = new javax.swing.JTable();
        jButtonRegresarPrincipal = new javax.swing.JButton();
        jRadioButtonCancelarReserva = new javax.swing.JRadioButton();
        jButtonSalirPrograma = new javax.swing.JButton();
        jButtonCancelarReserva = new javax.swing.JButton();
        jButtonVolverLogin = new javax.swing.JButton();
        jLabelFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("SISTEMA DE RESERVA ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 34, -1, -1));

        TipoBusqueda.setBackground(new java.awt.Color(204, 204, 204));
        TipoBusqueda.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        TipoBusqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TITULO", "AUTOR" }));
        TipoBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipoBusquedaActionPerformed(evt);
            }
        });
        getContentPane().add(TipoBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(79, 142, 132, -1));

        BuscarUser.setFont(new java.awt.Font("Arial", 2, 11)); // NOI18N
        BuscarUser.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        BuscarUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarUserActionPerformed(evt);
            }
        });
        BuscarUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                BuscarUserKeyTyped(evt);
            }
        });
        getContentPane().add(BuscarUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(79, 106, 584, 30));

        BuscarButton.setBackground(new java.awt.Color(153, 153, 153));
        BuscarButton.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        BuscarButton.setForeground(new java.awt.Color(255, 255, 255));
        BuscarButton.setText("BUSCAR");
        BuscarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarButtonActionPerformed(evt);
            }
        });
        getContentPane().add(BuscarButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(586, 142, -1, 20));

        JtextCodigoLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JtextCodigoLibroActionPerformed(evt);
            }
        });
        getContentPane().add(JtextCodigoLibro, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 350, 160, 28));

        jLabelCodigoLibro.setFont(new java.awt.Font("Arial", 2, 11)); // NOI18N
        jLabelCodigoLibro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCodigoLibro.setText("CÃ³digo de libro");
        getContentPane().add(jLabelCodigoLibro, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 380, 160, -1));

        jTableLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableLibros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableLibrosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableLibros);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 920, 127));

        jButtonReservar.setText("Reservar");
        jButtonReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReservarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonReservar, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 350, 147, 30));
        getContentPane().add(jDateChooserFechaReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 350, 150, 28));

        jLabel2.setFont(new java.awt.Font("Arial", 2, 11)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Fecha de reserva");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, 150, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 318, 940, 8));

        jTableReservas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableReservas.getTableHeader().setResizingAllowed(false);
        jTableReservas.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTableReservas);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 429, 920, 98));

        jButtonRegresarPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/HOME.ICONO.png"))); // NOI18N
        jButtonRegresarPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegresarPrincipalActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonRegresarPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 560, 40, 40));

        jRadioButtonCancelarReserva.setText("Cancelar Reserva");
        jRadioButtonCancelarReserva.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonCancelarReservaStateChanged(evt);
            }
        });
        jRadioButtonCancelarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonCancelarReservaActionPerformed(evt);
            }
        });
        getContentPane().add(jRadioButtonCancelarReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 350, -1, -1));

        jButtonSalirPrograma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/SALIR-ICONO.png"))); // NOI18N
        jButtonSalirPrograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirProgramaActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonSalirPrograma, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 560, 40, -1));

        jButtonCancelarReserva.setText("Cancelar");
        jButtonCancelarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarReservaActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCancelarReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 380, 110, -1));

        jButtonVolverLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/INICIAR-SESIO-ICONO (1).png"))); // NOI18N
        jButtonVolverLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverLoginActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonVolverLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 560, 40, -1));

        jLabelFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/WALLPAPER BLANCO BIBLIOTECARIO.jpg"))); // NOI18N
        getContentPane().add(jLabelFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 940, 610));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TipoBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TipoBusquedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TipoBusquedaActionPerformed

    private void BuscarUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarUserActionPerformed

    }//GEN-LAST:event_BuscarUserActionPerformed

    private void BuscarUserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BuscarUserKeyTyped

    }//GEN-LAST:event_BuscarUserKeyTyped

//BUSCA UN LIBRO, PARA MOSTRAR LA INFORMACION
 int swLimpiar=0;
 LibroNg libroNg=new LibroNg();
List<LibroEn> listaLibros = new ArrayList<LibroEn>();   
    //BUSCA LOS LIBROS Y LOS UBICA EN LA TABLA
    private void BuscarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarButtonActionPerformed
        if (swLimpiar==1)
      {
          remover();
      }
//Validar que los campos no esten vacios
       int j;
       j=OpcionSeleccionada();
       if(BuscarUser.getText().length()!=0){
         String titulo=BuscarUser.getText().trim();
         String autor=BuscarUser.getText().trim();
         LibroNg librong=new LibroNg(); 
         listaLibros=librong.CargarRegistros(titulo, autor,j);
         if(listaLibros.isEmpty()==false){
             cargarModelo(listaLibros);
              swLimpiar=1;
         }else{
             JOptionPane.showMessageDialog(rootPane,cadena+" no encontrado","Error de busqueda",JOptionPane.ERROR_MESSAGE);
         }    
            
       }else{
           JOptionPane.showMessageDialog(rootPane, "Campo vacio, por favor verifique","Campo a buscar vacio",JOptionPane.WARNING_MESSAGE);
       }
    }//GEN-LAST:event_BuscarButtonActionPerformed



//VACIA LA TABLA DESPUES DE CADA BUSQUEDA
 public void remover(){
       int filas=jTableLibros.getRowCount();
         for (int i = filas-1; i >=0; i--) {
             mtabla.removeRow(i);
         }
    } 

    


//VARIABLE CREADA PARA MEJORAR LAS ALERTAS, VALIDA QUE TIPO DE BUSQUEDA ESTA HACIENDO EL USUARIO
String cadena;
   //VERIFICA SI ES LIBRO O AUTOR
 public int OpcionSeleccionada(){
        int j;
         String funcion= TipoBusqueda.getSelectedItem().toString().trim();
        if(funcion.equalsIgnoreCase("TITULO")){
           cadena= "Titulo";
           return 1;
        }else{
            cadena="Autor";
            return 0;
        }
    }
    
 
 //CARGA LA TABLA CON EL NOMBRE, AUTOR , CODIGO Y ESTADO DE LOS LIBROS BUSCADOS
  public void cargarModelo(List<LibroEn> listaLibros){
        for(LibroEn li: listaLibros){
           mtabla.addRow(new Object[]{li.getNombreLibro(),li.getAutor(),li.getCodigoLibro(),li.getEstadoLibro()} ); 
        }
        jTableLibros.setModel(mtabla);
     
       
    }  
    
 
 //VALIDA QUE NINGUNO DE LOS CAMPOS NECESARIOS PARA RESERVA ESTEN VACIOS (CODIGO, FECHA Y CODIGO CLIENTE)
  //EN ESTE METODO CAMBIA UNA VARIABLE ENTRE FALSE Y TRUE PARA SER USADA DESPUES EN LAS RESPECTIVAS VALIDACIONES
 boolean validoGuardar=true;
 public void ValidaCamposVacios(){
       if(JtextCodigoLibro.getText().trim().length()==0){
           validoGuardar = false;
           JOptionPane.showMessageDialog(rootPane,"Ingrese cÃ³digo del libro","Error",JOptionPane.ERROR_MESSAGE);
       }else{
           validoGuardar = true;
           if(jDateChooserFechaReserva.getDate()==null){
             validoGuardar = false;
             JOptionPane.showMessageDialog(rootPane,"Ingrese fecha de reserva","Error",JOptionPane.ERROR_MESSAGE);
                                                        }
            }
}
 
 
 
 //RECIBE UN BOOLEAN DESDE NEGOCIO Y RETORNA UN BOOLEAN DEPENDIENDO SI ENCONTRÃ O NO UN LIBRO BUSCADO
   public boolean validarDisponibilidadLibro(){
       boolean disponibilidad=false;
     listaLibros=libroNg.FindRegisters(JtextCodigoLibro.getText().trim());
     if(listaLibros.isEmpty()==false){
         disponibilidad=libroNg.LibroDisponible(listaLibros,JtextCodigoLibro.getText().trim());
         if(disponibilidad==true){
             JOptionPane.showMessageDialog(rootPane, "Libro disponible para reserva");
                                 }else{
             JOptionPane.showMessageDialog(rootPane, "Libro no disponible para reserva","Libro no disponible",JOptionPane.ERROR_MESSAGE);
         }
                                      }else{
         JOptionPane.showMessageDialog(rootPane, "Libro no encontrado","Libro no existe",JOptionPane.ERROR_MESSAGE);
                                           }
     return disponibilidad;
}
  
    
    
    

//VALIDA SI LA EXISTENCIA DE UN ESTUDIANTE, EMPLEADO Y DISPONIBILIDAD Y RETORNA UN BOOLEAN CON ESTA VALIDACION
   String vec[]=new String[2];

    public boolean ValidarExistenciaYDisponibilidad(){
        vec=reservaNg.RetornarId();
        boolean estudianteValidoPrestamo=false;
        boolean disponibilidad=false;
        boolean empleadoValidoPrestamo=false;
         String carnet , cedula;
         //RECIBE UN BOOLEAN CON LA VALIDACION DE QUE YA SELECCIONO UN TIPO DE USUARIO CORRECTO
        
                
                //VERIFICA UN SW QUE ME DETERMINA EL TIPO DE USUARIO QUE ESCOGIO EL CLIENTE (ESTUDIANTE), PARA VALIDAR INFORMACIÃN
            
                if (vec[1].equals("1")) {
                carnet = vec[0].trim();
                EstudianteNg estudianteNg = new EstudianteNg();
                List<EstudianteEn> listaEstudiantes = new ArrayList<EstudianteEn>();
                listaEstudiantes=estudianteNg.BuscarEstudiante(carnet);
                //VALIDA SI LA LISTA ESTA VACIA, LA CUAL FUE RECIBIDA DE (estudianteNg.BuscarEstudiante(carnet);)
               if(listaEstudiantes.isEmpty()==false){   
                   estudianteValidoPrestamo=estudianteNg.ValidarDisponibilidadEstudiante(listaEstudiantes, carnet);
                   //VALIDA QUE UN ESTUDIANTE ESTE DISPONIBLE PARA PRESTAMO Y MUESTRA MENSAJE DE ESTE
                       if(estudianteValidoPrestamo==true){
                           JOptionPane.showMessageDialog(rootPane, "Estudiante Disponible para reserva");
                           disponibilidad=estudianteValidoPrestamo;
                                                         }else{
                           JOptionPane.showMessageDialog(rootPane, "Estudiante no disponible para realizar reserva","No disponible",JOptionPane.ERROR_MESSAGE);
                                                              }
                                                     }else{
                   JOptionPane.showMessageDialog(rootPane, "Estudiante no existe","Busqueda erronea",JOptionPane.ERROR_MESSAGE);
                                                          }
                        }
            
            //VERIFICA UN SW QUE ME DETERMINA EL TIPO DE USUARIO QUE ESCOGIO EL CLIENTE (EMPLEDO), PARA VALIDAR INFORMACIÃN
            if(vec[1].equals("2")){
                cedula=vec[0].trim();
                EmpleadoNg empleadoNg=new EmpleadoNg();
                List<EmpleadoEn> listaEmpleados = new ArrayList<EmpleadoEn>();
                listaEmpleados=empleadoNg.BuscarEmpleado(cedula);
                //VALIDA SI LA LISTA DE EMPLEADO ESTA VACIA, LA CUAL FUE RECIBIDA DE (empleadoNg.BuscarEmpleado(cedula))
                if(listaEmpleados.isEmpty()==false){
                  empleadoValidoPrestamo=empleadoNg.ValidarDisponibilidadEmpleado(listaEmpleados, cedula);
                  //VALIDA QUE UN EMPLEADO ESTE DISPONIBLE PARA PRESTAMO Y MUESTRA MENSAJE DE ESTE
                      if(empleadoValidoPrestamo==true){
                          JOptionPane.showMessageDialog(rootPane, "Empleado disponible para reservar");
                          disponibilidad=empleadoValidoPrestamo;
                                                      }else{
                         JOptionPane.showMessageDialog(rootPane,"Empleado no disponible para realizar reserva","No disponible",JOptionPane.ERROR_MESSAGE);
                                                           }
                                                    }else{
                    JOptionPane.showMessageDialog(rootPane, "Empleado no existe","Error de busqueda",JOptionPane.ERROR_MESSAGE);
                                                         }
            }
                                
       //RETORNA LA APROVACION O DESAPROVACION, SI UN ESTUDIANTE O EMPLEADO ESTAN DISPONIBLES PARA PODER REALIZAR LA RESERVA
        return disponibilidad;
    }
    
    
  
     
     boolean estadoBuscar=false; 
   //GENERA MATRIZ LA CUAL PERMITE LLEVAR ESTO A LA TABLA YA CREADA
    String []encabezados={"TITULO","AUTOR ","CÃDIGO ","ESTADO "};
    Object[][] filas=null;
    DefaultTableModel mtabla=new DefaultTableModel(filas,encabezados);
    
    
    //GENERA MATRIZ RESERVADOS PARA LLEVAR ESTO A LA TABLA CREADA PARA RESERVADOS
    Object[][] filas2=null;
    String []encabezados2={"NOMBRE LIBRO", "CÃDIGO LIBRO", "CÃDIGO CLIENTE","FECHA RESERVA" };
    DefaultTableModel mtablas= new DefaultTableModel(filas2,encabezados2);
    

    //VERIFICA QUE LA FECHA INGRESADA NO SEA INVALIDA
    //(MENOR O IGUAL A LA ACTUAL)
public boolean VerificarFecha(){
         Date dat=new Date();
         if(jDateChooserFechaReserva.getDate().getTime()>=dat.getTime()){
             return true;
                                                                       }
             return false;        
    }  
    
    
    
    //GUARDA UNA RESERVA REALIZADA POR UN CLIENTE DADO
    public void GuardaReserva(){
     vec=reservaNg.RetornarId();
      //GENERA UNA VARIABLE TIPO (Date) PARA ALMACENAR LA FECHA DE RESERVA
         Date fechaRes=new Date();
    
    // (ValidoGuardar) ES UN SW QUE SE CAMBIA CUANDO NO FALTE NI UN CAMPO OBLIGATORIO PARA LA RESERVA
    if(validoGuardar==true){
        //
        Iterator<LibroEn> iteradoro = listaLibros.iterator(); 
        String tituloLibro,codigoLibro,fechaReserva,codigoCliente;
        codigoLibro=JtextCodigoLibro.getText().trim();
        codigoCliente=vec[0].trim();
        fechaReserva=df.format(jDateChooserFechaReserva.getDate());
        tituloLibro=libroNg.NombreLibro(iteradoro, listaLibros);
        //CREO UN OBJETO RESERVA CON TODA LA INFORMACION DE LA RESERVA LA CUAL FUE SUMINISTRADA POR TECLADO 
        ReservaEn reservaEn=new ReservaEn(tituloLibro.toUpperCase(), codigoLibro.toUpperCase(), codigoCliente.toLowerCase(), fechaReserva.toLowerCase());
        
        if(reservaNg.GuardarReserva(reservaEn)){
                   JOptionPane.showMessageDialog(rootPane, "Reserva guardada exitosamente!");
                                               }else{
                   JOptionPane.showMessageDialog(rootPane, "Â¡Error al guardar reserva!","Error de reserva",JOptionPane.ERROR_MESSAGE);
                                                    }
        //AGREGAR RESERVA PARA MOSTRAR
        mtablas.addRow(new Object[]{tituloLibro.toUpperCase(), codigoLibro.toUpperCase(), codigoCliente.toLowerCase(), fechaReserva.toLowerCase()} );
        jTableReservas.setModel(mtablas);
                           }
        }
    private void JtextCodigoLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JtextCodigoLibroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JtextCodigoLibroActionPerformed

    private void jTableLibrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableLibrosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableLibrosMouseClicked
//CREACION DE OBJETO RESERVA(NEGOCIO)  
ReservaNg reservaNg=new ReservaNg();

//ACCION DEL BOTON RESERVAR
    private void jButtonReservarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReservarActionPerformed
boolean disponibilidadLibro=false;
boolean disponibildadCliente=false;

//VALIDA QUE LOS CAMPOS PARA LA RESERVA NO SE ENCUENTREN VACIOS
ValidaCamposVacios();
if(validoGuardar==true){
 
disponibilidadLibro=validarDisponibilidadLibro();
disponibildadCliente=ValidarExistenciaYDisponibilidad();

    if(disponibildadCliente==true){
         if(disponibilidadLibro==true){
               if(VerificarFecha()){
                   GuardaReserva();
                   //MODIFICA EL ESTADO DEL LIBRO
                   libroNg.ModificarEstadoLibro(JtextCodigoLibro.getText().trim(),"RESERVADO");
                                   }else{
                   JOptionPane.showMessageDialog(rootPane, "La fecha a la que desea reservar el libro, no es valida","Error de fecha",JOptionPane.ERROR_MESSAGE);
                                        }
                                      }   
                                  }
                      }
    }//GEN-LAST:event_jButtonReservarActionPerformed

  //PERMITE VACIAR LA TABLA DE RESER  
    public void VaciarTablaReservas(){
       int filas=jTableReservas.getRowCount();
         for (int i = filas-1; i >=0; i--) {
             mtablas.removeRow(i);
         }
    }

//ME REGRESA AL MENU PRINCIPAL
    private void jButtonRegresarPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegresarPrincipalActionPerformed
       UsuariosV userV=new UsuariosV();
       reservaNg.EliminarLoginActul();
       userV.setVisible(true);
       this.dispose();
    }//GEN-LAST:event_jButtonRegresarPrincipalActionPerformed


//OCULTO Y HAGO VISIBLE CAMPOS, BOTONES O DEMAS QUE NO SON NECESARIO PARA CANCELAR RESERVAR
    private void jRadioButtonCancelarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonCancelarReservaActionPerformed
String cacelar=jRadioButtonCancelarReserva.isSelected()?"si":"no";
        if(cacelar=="si"){
            jButtonCancelarReserva.setVisible(true);
            jDateChooserFechaReserva.setVisible(false);
            jLabel2.setVisible(false);
            jButtonReservar.setVisible(false);
       }else{
            jButtonCancelarReserva.setVisible(false);
            jDateChooserFechaReserva.setVisible(true);
            jLabel2.setVisible(true);
            jButtonReservar.setVisible(true);
        }  
    }//GEN-LAST:event_jRadioButtonCancelarReservaActionPerformed

    private void jRadioButtonCancelarReservaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonCancelarReservaStateChanged
      
    }//GEN-LAST:event_jRadioButtonCancelarReservaStateChanged

    private void jButtonSalirProgramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirProgramaActionPerformed
      reservaNg.EliminarLoginActul(); 
      System.exit(0);
    }//GEN-LAST:event_jButtonSalirProgramaActionPerformed

    private void jButtonCancelarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarReservaActionPerformed
       vec=reservaNg.RetornarId();
        List<ReservaEn> listaReserva = new ArrayList<ReservaEn>();
       //VALIDA QUE EL CAMPO DEL CODIGO DEL LIBRO NO SE ENCUENTRE VACIO
       if(JtextCodigoLibro.getText().length()!=0){
         listaReserva=reservaNg.BuscarReserva(JtextCodigoLibro.getText().trim());
         
           if(listaReserva.isEmpty()==false){
              //CONFIRMACION DE CANCELACION 
               int confi=JOptionPane.showConfirmDialog(rootPane, "Â¿Esta seguro de cancelar la reserva?","CancelaciÃ³n reserva",JOptionPane.YES_NO_OPTION);
               if(confi==JOptionPane.YES_OPTION){
                   if(reservaNg.ValidarEliminacionReserva(JtextCodigoLibro.getText().trim(),vec[0])){
                   libroNg.ModificarEstadoLibro(JtextCodigoLibro.getText().trim(), "DISPONIBLE");
                    reservaNg.EliminarReserva(JtextCodigoLibro.getText().trim());
                   JOptionPane.showMessageDialog(rootPane, "La reserva fuÃ© cancelada con exito");
                                                                                                    }else{
                       JOptionPane.showMessageDialog(rootPane, "Cacelacion fallida no es posible eliminar la reserva\n Libro no fue reservado por usted","Error",JOptionPane.WARNING_MESSAGE);
                                                                                                         }
                                                }else{
                   JOptionPane.showMessageDialog(rootPane, "La cancelaciÃ³n fue cancelada con Ã©xito","Cancelacion",JOptionPane.WARNING_MESSAGE);
                                                     }
                                             }else{
               JOptionPane.showMessageDialog(rootPane, "No hay reservas para ese cÃ³digo","Error de busqueda",JOptionPane.WARNING_MESSAGE);
                                                  }
                                                  }else{
           JOptionPane.showMessageDialog(rootPane, "Campo cÃ³digo de libro vacÃ­o","Campo vacÃ­o",JOptionPane.ERROR_MESSAGE);
                                                       }
    }//GEN-LAST:event_jButtonCancelarReservaActionPerformed

    
    //PERMITE REGRESAR AL LOGIN
    private void jButtonVolverLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverLoginActionPerformed
       LoginV loginV=new LoginV();
       loginV.setVisible(true);
       reservaNg.EliminarLoginActul(); 
       this.dispose();
    }//GEN-LAST:event_jButtonVolverLoginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientesV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientesV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientesV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientesV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientesV().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuscarButton;
    private javax.swing.JTextField BuscarUser;
    private javax.swing.JTextField JtextCodigoLibro;
    private javax.swing.JComboBox<String> TipoBusqueda;
    private javax.swing.JButton jButtonCancelarReserva;
    private javax.swing.JButton jButtonRegresarPrincipal;
    private javax.swing.JButton jButtonReservar;
    private javax.swing.JButton jButtonSalirPrograma;
    private javax.swing.JButton jButtonVolverLogin;
    private com.toedter.calendar.JDateChooser jDateChooserFechaReserva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelCodigoLibro;
    private javax.swing.JLabel jLabelFondo;
    private javax.swing.JRadioButton jRadioButtonCancelarReserva;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableLibros;
    private javax.swing.JTable jTableReservas;
    // End of variables declaration//GEN-END:variables
}
